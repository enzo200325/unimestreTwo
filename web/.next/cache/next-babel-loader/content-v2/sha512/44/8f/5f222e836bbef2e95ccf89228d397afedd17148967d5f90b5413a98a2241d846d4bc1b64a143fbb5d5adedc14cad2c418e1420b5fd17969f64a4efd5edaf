{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const CreateNoteDocument = gql`\n    mutation CreateNote($lectureId: Float!, $user: String!, $isImage: Boolean!, $link: String!) {\n  addNote(lectureId: $lectureId, user: $user, isImage: $isImage, link: $link) {\n    link\n    isImage\n  }\n}\n    `;\nexport function useCreateNoteMutation() {\n  return Urql.useMutation(CreateNoteDocument);\n}\n;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation() {\n  return Urql.useMutation(LogoutDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $name: String!, $code: String!) {\n  registerUser(code: $code, name: $name, username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const TeacherFromSubjectNameDocument = gql`\n    query TeacherFromSubjectName($subjectName: String!) {\n  getTeacherFromSubjectName(subjectName: $subjectName) {\n    teacher\n    lectures {\n      month\n      day\n      weekDay\n      time\n      id\n      notes {\n        isImage\n        link\n      }\n    }\n  }\n}\n    `;\nexport function useTeacherFromSubjectNameQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: TeacherFromSubjectNameDocument\n  }, options));\n}\n;\nexport const GetLectureTimesDocument = gql`\n    query getLectureTimes {\n  lectureTimes {\n    id\n    teacher {\n      name\n    }\n    day\n    weekDay\n    time\n  }\n}\n    `;\nexport function useGetLectureTimesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetLectureTimesDocument\n  }, options));\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    username\n    id\n  }\n}\n    `;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;\nexport const GetNotesDocument = gql`\n    query getNotes {\n  noteComplete {\n    id\n    userId\n    lecture {\n      time\n      day\n      teacher {\n        name\n      }\n    }\n    user {\n      username\n    }\n  }\n}\n    `;\nexport function useGetNotesQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: GetNotesDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/generated/graphql.tsx"],"names":["gql","Urql","CreateNoteDocument","useCreateNoteMutation","useMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation","TeacherFromSubjectNameDocument","useTeacherFromSubjectNameQuery","options","useQuery","query","GetLectureTimesDocument","useGetLectureTimesQuery","MeDocument","useMeQuery","GetNotesDocument","useGetNotesQuery"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAwUA,OAAO,MAAMC,kBAAkB,GAAGF,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,KAPO;AASP,OAAO,SAASG,qBAAT,GAAiC;AACtC,SAAOF,IAAI,CAACG,WAAL,CAAkEF,kBAAlE,CAAP;AACD;AAAA;AACD,OAAO,MAAMG,aAAa,GAAGL,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAeP,OAAO,SAASM,gBAAT,GAA4B;AACjC,SAAOL,IAAI,CAACG,WAAL,CAAwDC,aAAxD,CAAP;AACD;AAAA;AACD,OAAO,MAAME,cAAc,GAAGP,GAAI;AAClC;AACA;AACA;AACA,KAJO;AAMP,OAAO,SAASQ,iBAAT,GAA6B;AAClC,SAAOP,IAAI,CAACG,WAAL,CAA0DG,cAA1D,CAAP;AACD;AAAA;AACD,OAAO,MAAME,gBAAgB,GAAGT,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAeP,OAAO,SAASU,mBAAT,GAA+B;AACpC,SAAOT,IAAI,CAACG,WAAL,CAA8DK,gBAA9D,CAAP;AACD;AAAA;AACD,OAAO,MAAME,8BAA8B,GAAGX,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;AAmBP,OAAO,SAASY,8BAAT,CAAwCC,OAA+E,GAAG,EAA1H,EAA8H;AACnI,SAAOZ,IAAI,CAACa,QAAL;AAA6CC,IAAAA,KAAK,EAAEJ;AAApD,KAAuFE,OAAvF,EAAP;AACD;AAAA;AACD,OAAO,MAAMG,uBAAuB,GAAGhB,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAZO;AAcP,OAAO,SAASiB,uBAAT,CAAiCJ,OAAwE,GAAG,EAA5G,EAAgH;AACrH,SAAOZ,IAAI,CAACa,QAAL;AAAsCC,IAAAA,KAAK,EAAEC;AAA7C,KAAyEH,OAAzE,EAAP;AACD;AAAA;AACD,OAAO,MAAMK,UAAU,GAAGlB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAPO;AASP,OAAO,SAASmB,UAAT,CAAoBN,OAA2D,GAAG,EAAlF,EAAsF;AAC3F,SAAOZ,IAAI,CAACa,QAAL;AAAyBC,IAAAA,KAAK,EAAEG;AAAhC,KAA+CL,OAA/C,EAAP;AACD;AAAA;AACD,OAAO,MAAMO,gBAAgB,GAAGpB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjBO;AAmBP,OAAO,SAASqB,gBAAT,CAA0BR,OAAiE,GAAG,EAA9F,EAAkG;AACvG,SAAOZ,IAAI,CAACa,QAAL;AAA+BC,IAAAA,KAAK,EAAEK;AAAtC,KAA2DP,OAA3D,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  me?: Maybe<User>;\n  teachers?: Maybe<Array<Teacher>>;\n  subjects: Array<Subject>;\n  getTeacherFromSubjectName: Array<Response>;\n  lectureTimes: Array<LectureTime>;\n  codes: Array<Code>;\n  notes: Array<Note>;\n  noteComplete: Array<Note>;\n  getNotesFromLecture: Array<Note>;\n};\n\n\nexport type QueryGetTeacherFromSubjectNameArgs = {\n  subjectName: Scalars['String'];\n};\n\n\nexport type QueryGetNotesFromLectureArgs = {\n  lectureId: Scalars['Float'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type Teacher = {\n  __typename?: 'Teacher';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  name?: Maybe<Scalars['String']>;\n  lectureTimes: Array<LectureTime>;\n  subject: Subject;\n  subjectId: Scalars['Float'];\n};\n\nexport type LectureTime = {\n  __typename?: 'LectureTime';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  month?: Maybe<Scalars['String']>;\n  day?: Maybe<Scalars['String']>;\n  weekDay?: Maybe<Scalars['String']>;\n  time: Scalars['String'];\n  link?: Maybe<Scalars['String']>;\n  teacherId: Scalars['Float'];\n  teacher: Teacher;\n  notes?: Maybe<Array<Note>>;\n};\n\nexport type Note = {\n  __typename?: 'Note';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  description?: Maybe<Scalars['String']>;\n  isImage: Scalars['Boolean'];\n  link?: Maybe<Scalars['String']>;\n  user: User;\n  userId: Scalars['Float'];\n  lecture: LectureTime;\n  lectureId: Scalars['Float'];\n};\n\nexport type Subject = {\n  __typename?: 'Subject';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  name: Scalars['String'];\n  teachers: Array<Teacher>;\n};\n\nexport type Response = {\n  __typename?: 'response';\n  teacher: Scalars['String'];\n  lectures: Array<LectureTime>;\n};\n\nexport type Code = {\n  __typename?: 'Code';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  registerUser: UserResponse;\n  login: UserResponse;\n  logout: Scalars['Boolean'];\n  addTeacher: Teacher;\n  removeTeacher: Scalars['String'];\n  addSubject: Subject;\n  addLectureTime: LectureTime;\n  addCodes: Array<Code>;\n  addNote: Note;\n};\n\n\nexport type MutationRegisterUserArgs = {\n  code: Scalars['String'];\n  name: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationAddTeacherArgs = {\n  subjectName: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationRemoveTeacherArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddSubjectArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddLectureTimeArgs = {\n  teacherName: Scalars['String'];\n  time: Scalars['String'];\n  weekDay: Scalars['String'];\n  day: Scalars['String'];\n  month: Scalars['String'];\n};\n\n\nexport type MutationAddCodesArgs = {\n  codes: Array<Scalars['String']>;\n};\n\n\nexport type MutationAddNoteArgs = {\n  lectureId: Scalars['Float'];\n  user: Scalars['String'];\n  link: Scalars['String'];\n  isImage: Scalars['Boolean'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type CreateNoteMutationVariables = Exact<{\n  lectureId: Scalars['Float'];\n  user: Scalars['String'];\n  isImage: Scalars['Boolean'];\n  link: Scalars['String'];\n}>;\n\n\nexport type CreateNoteMutation = (\n  { __typename?: 'Mutation' }\n  & { addNote: (\n    { __typename?: 'Note' }\n    & Pick<Note, 'link' | 'isImage'>\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username' | 'id'>\n    )> }\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n  code: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { registerUser: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username' | 'id'>\n    )> }\n  ) }\n);\n\nexport type TeacherFromSubjectNameQueryVariables = Exact<{\n  subjectName: Scalars['String'];\n}>;\n\n\nexport type TeacherFromSubjectNameQuery = (\n  { __typename?: 'Query' }\n  & { getTeacherFromSubjectName: Array<(\n    { __typename?: 'response' }\n    & Pick<Response, 'teacher'>\n    & { lectures: Array<(\n      { __typename?: 'LectureTime' }\n      & Pick<LectureTime, 'month' | 'day' | 'weekDay' | 'time' | 'id'>\n      & { notes?: Maybe<Array<(\n        { __typename?: 'Note' }\n        & Pick<Note, 'isImage' | 'link'>\n      )>> }\n    )> }\n  )> }\n);\n\nexport type GetLectureTimesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetLectureTimesQuery = (\n  { __typename?: 'Query' }\n  & { lectureTimes: Array<(\n    { __typename?: 'LectureTime' }\n    & Pick<LectureTime, 'id' | 'day' | 'weekDay' | 'time'>\n    & { teacher: (\n      { __typename?: 'Teacher' }\n      & Pick<Teacher, 'name'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'username' | 'id'>\n  )> }\n);\n\nexport type GetNotesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetNotesQuery = (\n  { __typename?: 'Query' }\n  & { noteComplete: Array<(\n    { __typename?: 'Note' }\n    & Pick<Note, 'id' | 'userId'>\n    & { lecture: (\n      { __typename?: 'LectureTime' }\n      & Pick<LectureTime, 'time' | 'day'>\n      & { teacher: (\n        { __typename?: 'Teacher' }\n        & Pick<Teacher, 'name'>\n      ) }\n    ), user: (\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\n\nexport const CreateNoteDocument = gql`\n    mutation CreateNote($lectureId: Float!, $user: String!, $isImage: Boolean!, $link: String!) {\n  addNote(lectureId: $lectureId, user: $user, isImage: $isImage, link: $link) {\n    link\n    isImage\n  }\n}\n    `;\n\nexport function useCreateNoteMutation() {\n  return Urql.useMutation<CreateNoteMutation, CreateNoteMutationVariables>(CreateNoteDocument);\n};\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n};\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\nexport function useLogoutMutation() {\n  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument);\n};\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $name: String!, $code: String!) {\n  registerUser(code: $code, name: $name, username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const TeacherFromSubjectNameDocument = gql`\n    query TeacherFromSubjectName($subjectName: String!) {\n  getTeacherFromSubjectName(subjectName: $subjectName) {\n    teacher\n    lectures {\n      month\n      day\n      weekDay\n      time\n      id\n      notes {\n        isImage\n        link\n      }\n    }\n  }\n}\n    `;\n\nexport function useTeacherFromSubjectNameQuery(options: Omit<Urql.UseQueryArgs<TeacherFromSubjectNameQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<TeacherFromSubjectNameQuery>({ query: TeacherFromSubjectNameDocument, ...options });\n};\nexport const GetLectureTimesDocument = gql`\n    query getLectureTimes {\n  lectureTimes {\n    id\n    teacher {\n      name\n    }\n    day\n    weekDay\n    time\n  }\n}\n    `;\n\nexport function useGetLectureTimesQuery(options: Omit<Urql.UseQueryArgs<GetLectureTimesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetLectureTimesQuery>({ query: GetLectureTimesDocument, ...options });\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    username\n    id\n  }\n}\n    `;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};\nexport const GetNotesDocument = gql`\n    query getNotes {\n  noteComplete {\n    id\n    userId\n    lecture {\n      time\n      day\n      teacher {\n        name\n      }\n    }\n    user {\n      username\n    }\n  }\n}\n    `;\n\nexport function useGetNotesQuery(options: Omit<Urql.UseQueryArgs<GetNotesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetNotesQuery>({ query: GetNotesDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}