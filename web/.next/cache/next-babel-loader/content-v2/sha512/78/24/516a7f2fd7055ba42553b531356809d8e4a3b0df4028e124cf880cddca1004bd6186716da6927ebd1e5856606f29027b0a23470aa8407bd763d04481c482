{"ast":null,"code":"import _defineProperty from \"C:/Dev/Projects/unimestreTwo/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"C:/Dev/Projects/unimestreTwo/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    username\\n    id\\n  }\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query getLectureTimes {\\n  lectureTimes {\\n    teacher {\\n      name\\n    }\\n    day\\n    time\\n  }\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($username: String!, $password: String!, $name: String!, $code: String!) {\\n  registerUser(code: $code, name: $name, username: $username, password: $password) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      username\\n      id\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($username: String!, $password: String!) {\\n  login(username: $username, password: $password) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      username\\n      id\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport var LoginDocument = gql(_templateObject());\nexport function useLoginMutation() {\n  _s();\n\n  return Urql.useMutation(LoginDocument);\n}\n\n_s(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var RegisterDocument = gql(_templateObject2());\nexport function useRegisterMutation() {\n  _s2();\n\n  return Urql.useMutation(RegisterDocument);\n}\n\n_s2(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Urql.useMutation];\n});\n\n;\nexport var GetLectureTimesDocument = gql(_templateObject3());\nexport function useGetLectureTimesQuery() {\n  _s3();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Urql.useQuery(_objectSpread({\n    query: GetLectureTimesDocument\n  }, options));\n}\n\n_s3(useGetLectureTimesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Urql.useQuery];\n});\n\n;\nexport var MeDocument = gql(_templateObject4());\nexport function useMeQuery() {\n  _s4();\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n\n_s4(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Urql.useQuery];\n});\n\n;","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/generated/graphql.tsx"],"names":["gql","Urql","LoginDocument","useLoginMutation","useMutation","RegisterDocument","useRegisterMutation","GetLectureTimesDocument","useGetLectureTimesQuery","options","useQuery","query","MeDocument","useMeQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAsNA,OAAO,IAAMC,aAAa,GAAGF,GAAH,mBAAnB;AAeP,OAAO,SAASG,gBAAT,GAA4B;AAAA;;AACjC,SAAOF,IAAI,CAACG,WAAL,CAAwDF,aAAxD,CAAP;AACD;;GAFeC,gB;UACPF,IAAI,CAACG,W;;;AACb;AACD,OAAO,IAAMC,gBAAgB,GAAGL,GAAH,oBAAtB;AAeP,OAAO,SAASM,mBAAT,GAA+B;AAAA;;AACpC,SAAOL,IAAI,CAACG,WAAL,CAA8DC,gBAA9D,CAAP;AACD;;IAFeC,mB;UACPL,IAAI,CAACG,W;;;AACb;AACD,OAAO,IAAMG,uBAAuB,GAAGP,GAAH,oBAA7B;AAYP,OAAO,SAASQ,uBAAT,GAAgH;AAAA;;AAAA,MAA/EC,OAA+E,uEAAJ,EAAI;AACrH,SAAOR,IAAI,CAACS,QAAL;AAAsCC,IAAAA,KAAK,EAAEJ;AAA7C,KAAyEE,OAAzE,EAAP;AACD;;IAFeD,uB;UACPP,IAAI,CAACS,Q;;;AACb;AACD,OAAO,IAAME,UAAU,GAAGZ,GAAH,oBAAhB;AASP,OAAO,SAASa,UAAT,GAAsF;AAAA;;AAAA,MAAlEJ,OAAkE,uEAAJ,EAAI;AAC3F,SAAOR,IAAI,CAACS,QAAL;AAAyBC,IAAAA,KAAK,EAAEC;AAAhC,KAA+CH,OAA/C,EAAP;AACD;;IAFeI,U;UACPZ,IAAI,CAACS,Q;;;AACb","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  me?: Maybe<User>;\n  teachers?: Maybe<Array<Teacher>>;\n  subjects: Array<Subject>;\n  subject: Subject;\n  lectureTimes: Array<LectureTime>;\n  codes: Array<Code>;\n};\n\n\nexport type QuerySubjectArgs = {\n  name: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type Teacher = {\n  __typename?: 'Teacher';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  name?: Maybe<Scalars['String']>;\n  subjectId: Scalars['Float'];\n};\n\nexport type Subject = {\n  __typename?: 'Subject';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  name: Scalars['String'];\n};\n\nexport type LectureTime = {\n  __typename?: 'LectureTime';\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  day: Scalars['String'];\n  time: Scalars['String'];\n  link?: Maybe<Scalars['String']>;\n  teacherId: Scalars['Float'];\n  teacher: Teacher;\n};\n\nexport type Code = {\n  __typename?: 'Code';\n  id: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  value: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  registerUser: UserResponse;\n  login: UserResponse;\n  addTeacher: Teacher;\n  removeTeacher: Scalars['String'];\n  addSubject: Subject;\n  addLectureTime: LectureTime;\n  addCodes: Array<Code>;\n};\n\n\nexport type MutationRegisterUserArgs = {\n  code: Scalars['String'];\n  name: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationAddTeacherArgs = {\n  subjectName: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationRemoveTeacherArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddSubjectArgs = {\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddLectureTimeArgs = {\n  teacherName: Scalars['String'];\n  time: Scalars['String'];\n  day: Scalars['String'];\n};\n\n\nexport type MutationAddCodesArgs = {\n  codes: Array<Scalars['String']>;\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username' | 'id'>\n    )> }\n  ) }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n  code: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { registerUser: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username' | 'id'>\n    )> }\n  ) }\n);\n\nexport type GetLectureTimesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetLectureTimesQuery = (\n  { __typename?: 'Query' }\n  & { lectureTimes: Array<(\n    { __typename?: 'LectureTime' }\n    & Pick<LectureTime, 'day' | 'time'>\n    & { teacher: (\n      { __typename?: 'Teacher' }\n      & Pick<Teacher, 'name'>\n    ) }\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'username' | 'id'>\n  )> }\n);\n\n\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useLoginMutation() {\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\n};\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!, $name: String!, $code: String!) {\n  registerUser(code: $code, name: $name, username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const GetLectureTimesDocument = gql`\n    query getLectureTimes {\n  lectureTimes {\n    teacher {\n      name\n    }\n    day\n    time\n  }\n}\n    `;\n\nexport function useGetLectureTimesQuery(options: Omit<Urql.UseQueryArgs<GetLectureTimesQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<GetLectureTimesQuery>({ query: GetLectureTimesDocument, ...options });\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    username\n    id\n  }\n}\n    `;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}