{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Dev\\\\Projects\\\\unimestreTwo\\\\web\\\\src\\\\pages\\\\lecture\\\\[lid].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport { useGetNotesFromLectureIdQuery } from '../../generated/graphql';\n\nvar LecturePage = function LecturePage() {\n  _s();\n\n  var _notesFromLecture$, _notesFromLecture$$da, _notesFromLecture;\n\n  var router = useRouter();\n  var lid = router.query.lid;\n  var notesFromLecture = useGetNotesFromLectureIdQuery({\n    variables: {\n      lectureId: Number(lid)\n    }\n  });\n  notesFromLecture = (_notesFromLecture$ = notesFromLecture[0]) === null || _notesFromLecture$ === void 0 ? void 0 : (_notesFromLecture$$da = _notesFromLecture$.data) === null || _notesFromLecture$$da === void 0 ? void 0 : _notesFromLecture$$da.getNotesFromLecture;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (_notesFromLecture = notesFromLecture) === null || _notesFromLecture === void 0 ? void 0 : _notesFromLecture.map(function (note) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: note === null || note === void 0 ? void 0 : note.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(LecturePage, \"qyP6Q9EqhMdkk2bD6CZ14DWaxzg=\", false, function () {\n  return [useRouter, useGetNotesFromLectureIdQuery];\n});\n\n_c = LecturePage;\nexport default LecturePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LecturePage\");","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/pages/lecture/[lid].tsx"],"names":["useRouter","useGetNotesFromLectureIdQuery","LecturePage","router","lid","query","notesFromLecture","variables","lectureId","Number","data","getNotesFromLecture","map","note","content"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAAkCC,6BAAlC,QAAwF,yBAAxF;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA;;AACxB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AADwB,MAEhBI,GAFgB,GAERD,MAAM,CAACE,KAFC,CAEhBD,GAFgB;AAIxB,MAAIE,gBAAqB,GAAGL,6BAA6B,CAAC;AAACM,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAEC,MAAM,CAACL,GAAD;AAAlB;AAAZ,GAAD,CAAzD;AACAE,EAAAA,gBAAgB,yBAAGA,gBAAgB,CAAC,CAAD,CAAnB,gFAAG,mBAAqBI,IAAxB,0DAAG,sBAA2BC,mBAA9C;AAGA,sBACE;AAAA,mCACGL,gBADH,sDACG,kBAAkBM,GAAlB,CAAsB,UAAAC,IAAI,EAAI;AAC7B,0BACE;AAAA,kBAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEC;AAAV;AAAA;AAAA;AAAA;AAAA,eADF;AAGD,KAJA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CAjBD;;GAAMZ,W;UACWF,S,EAGaC,6B;;;KAJxBC,W;AAmBN,eAAeA,WAAf","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { useGetLectureTimesQuery, useGetNotesFromLectureIdQuery, useGetNotesQuery} from '../../generated/graphql';\r\n\r\nconst LecturePage = () => {\r\n  const router = useRouter()\r\n  const { lid } = router.query\r\n\r\n  let notesFromLecture: any = useGetNotesFromLectureIdQuery({variables: {lectureId: Number(lid)}}); \r\n  notesFromLecture = notesFromLecture[0]?.data?.getNotesFromLecture; \r\n\r\n  \r\n  return (\r\n    <div>\r\n      {notesFromLecture?.map(note => {\r\n        return (\r\n          <p>{note?.content}</p>\r\n        )\r\n      })}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default LecturePage;  "]},"metadata":{},"sourceType":"module"}