{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    username\n  }\n}\n    `;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/generated/graphql.tsx"],"names":["gql","Urql","RegisterDocument","useRegisterMutation","useMutation","MeDocument","useMeQuery","options","useQuery","query"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AA6FA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbO;AAeP,OAAO,SAASG,mBAAT,GAA+B;AACpC,SAAOF,IAAI,CAACG,WAAL,CAA8DF,gBAA9D,CAAP;AACD;AAAA;AACD,OAAO,MAAMG,UAAU,GAAGL,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,KANO;AAQP,OAAO,SAASM,UAAT,CAAoBC,OAA2D,GAAG,EAAlF,EAAsF;AAC3F,SAAON,IAAI,CAACO,QAAL;AAAyBC,IAAAA,KAAK,EAAEJ;AAAhC,KAA+CE,OAA/C,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  me?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Float'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  username: Scalars['String'];\n  nome: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  registerUser: UserResponse;\n  login: UserResponse;\n};\n\n\nexport type MutationRegisterUserArgs = {\n  nome: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type UserResponse = {\n  __typename?: 'UserResponse';\n  errors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type RegisterMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserResponse' }\n    & { errors?: Maybe<Array<(\n      { __typename?: 'FieldError' }\n      & Pick<FieldError, 'field' | 'message'>\n    )>>, user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'username' | 'id'>\n    )> }\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'username'>\n  )> }\n);\n\n\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    errors {\n      field\n      message\n    }\n    user {\n      username\n      id\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const MeDocument = gql`\n    query Me {\n  me {\n    username\n  }\n}\n    `;\n\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}