{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Dev\\\\Projects\\\\unimestreTwo\\\\web\\\\src\\\\pages\\\\_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/globals.css\";\nimport { createClient, dedupExchange, fetchExchange, Provider } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, data => fn(result, data));\n}\n\nconst client = createClient({\n  url: \"http://localhost:5000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, ingo) => {\n          cache.updateQuery({\n            query: MeDocument\n          }, data => {\n            if (result.login.errors) {\n              return query;\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 4\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/pages/_app.tsx"],"names":["createClient","dedupExchange","fetchExchange","Provider","cacheExchange","MeDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","args","ingo","query","errors","MyApp","Component","pageProps"],"mappings":";;;;;;;;;AAAA,OAAO,uBAAP;AACA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EAAqDC,QAArD,QAAqE,MAArE;AACA,SAASC,aAAT,QAAiD,2BAAjD;AACA,SAASC,UAAT,QAA2B,sBAA3B;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsBI,IAAI,IAAIF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAhC,CAAP;AACD;;AAED,MAAMC,MAAM,GAAGb,YAAY,CAAC;AAC1Bc,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CAAChB,aAAD,EAAgBG,aAAa,CAAC;AACvCc,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACX,MAAD,EAASY,IAAT,EAAed,KAAf,EAAsBe,IAAtB,KAA+B;AACpCf,UAAAA,KAAK,CAACI,WAAN,CAAkB;AAACY,YAAAA,KAAK,EAAElB;AAAR,WAAlB,EAAuCO,IAAI,IAAI;AAC7C,gBAAIH,MAAM,CAACW,KAAP,CAAaI,MAAjB,EAAyB;AACvB,qBAAOD,KAAP;AACD;AACF,WAJD;AAKD;AAPO;AADH;AAD8B,GAAD,CAA7B,EAYPrB,aAZO;AALe,CAAD,CAA3B;;AAoBA,SAASuB,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,sBACC,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEd,MAAjB;AAAA,2BACE,QAAC,SAAD,oBAAec,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAKD;;AAED,eAAeF,KAAf","sourcesContent":["import \"../styles/globals.css\"; \nimport { createClient, dedupExchange, fetchExchange, Provider } from \"urql\"\nimport { cacheExchange, Cache, QueryInput } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache, \n  qi: QueryInput, \n  result: any, \n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, data => fn(result, data as any) as any); \n}\n\nconst client = createClient({\n  url: \"http://localhost:5000/graphql\", \n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, ingo) => {\n          cache.updateQuery({query: MeDocument}, data => {\n            if (result.login.errors) {\n              return query \n            }\n          })\n        }\n      }\n    }\n  }), fetchExchange]\n})\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n   <Provider value={client}>\n     <Component {...pageProps} />\n   </Provider>\n  ); \n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}