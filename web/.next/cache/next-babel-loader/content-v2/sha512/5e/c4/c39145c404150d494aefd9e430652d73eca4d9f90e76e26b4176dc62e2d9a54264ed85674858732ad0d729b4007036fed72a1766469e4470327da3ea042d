{"ast":null,"code":"import _defineProperty from \"C:/Dev/Projects/unimestreTwo/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/Dev/Projects/unimestreTwo/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Dev\\\\Projects\\\\unimestreTwo\\\\web\\\\src\\\\pages\\\\_app.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"../styles/globals.css\";\nimport { createClient, dedupExchange, fetchExchange, Provider } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument, useMeQuery } from \"../generated/graphql\";\nimport { useRouter } from \"next/router\";\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\nvar client = createClient({\n  url: \"http://localhost:5000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: function login(result, args, cache, ingo) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, result, function (result, query) {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        registerUser: function registerUser(result, args, cache, ingo) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, result, function (result, query) {\n            if (result.registerUser.errors) {\n              return query;\n            } else {\n              return {\n                me: result.registerUser.user\n              };\n            }\n          });\n        },\n        logout: function logout(result, args, cache, ingo) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, result, function (result, query) {\n            return {\n              me: null\n            };\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useMeQuery = useMeQuery(),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      data = _useMeQuery2[0].data;\n\n  var router = useRouter();\n\n  if (!(data !== null && data !== void 0 && data.me)) {\n    router.push(\"/login\", undefined, {\n      shallow: false\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 4\n  }, this);\n}\n\n_s(MyApp, \"EVw1mmWArSYrDibKAaco8IDPfNY=\", false, function () {\n  return [useMeQuery, useRouter];\n});\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["C:/Dev/Projects/unimestreTwo/web/src/pages/_app.tsx"],"names":["createClient","dedupExchange","fetchExchange","Provider","cacheExchange","MeDocument","useMeQuery","useRouter","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","args","ingo","query","errors","me","user","registerUser","logout","MyApp","Component","pageProps","router","push","undefined","shallow"],"mappings":"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","sourcesContent":["import \"../styles/globals.css\"; \nimport { createClient, dedupExchange, fetchExchange, Provider } from \"urql\"\nimport { cacheExchange, Cache, QueryInput } from \"@urql/exchange-graphcache\";\nimport { MeDocument, LoginMutation, MeQuery, RegisterMutation, LogoutMutation, useMeQuery } from \"../generated/graphql\";\nimport { useRouter } from \"next/router\";\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache, \n  qi: QueryInput, \n  result: any, \n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, data => fn(result, data as any) as any); \n}\n\nconst client = createClient({\n  url: \"http://localhost:5000/graphql\", \n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [\n    dedupExchange, \n    cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, ingo) => {\n          betterUpdateQuery<LoginMutation, MeQuery>(cache,\n             {query: MeDocument},\n             result, \n             (result, query) => {\n              if (result.login.errors) {\n                return query; \n              } else {\n                return {\n                  me: result.login.user\n                }\n              }\n             }\n          )\n        }, \n        registerUser: (result, args, cache, ingo) => {\n          betterUpdateQuery<RegisterMutation, MeQuery>(cache,\n             {query: MeDocument},\n             result, \n             (result, query) => {\n              if (result.registerUser.errors) {\n                return query; \n              } else {\n                return {\n                  me: result.registerUser.user\n                }\n              }\n             }\n             )\n        }, \n        logout: (result, args, cache, ingo) => {\n          betterUpdateQuery<LogoutMutation, MeQuery>(cache,\n             {query: MeDocument},\n             result, \n             (result, query) => {\n               return {\n                me: null\n               }\n             }\n             )\n        }, \n      },\n    },\n  }),\n  fetchExchange,\n  ], \n})\n\nfunction MyApp({ Component, pageProps }) {\n  const [{data}] = useMeQuery(); \n  const router = useRouter()\n  if (!data?.me) {\n    router.push(\"/login\", undefined, {shallow: false}); \n  }\n\n  return (\n   <Provider value={client}>\n     <Component {...pageProps} />\n   </Provider>\n  ); \n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}